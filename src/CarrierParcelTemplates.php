<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Shippo\API;

use Shippo\API\Models\Operations;
use Speakeasy\Serializer\DeserializationContext;

class CarrierParcelTemplates
{
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(public SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * List all carrier parcel templates
     *
     * List all carrier parcel template objects. <br> Use the following query string params to filter the results as needed. <br>
     * <ul>
     * <li>`include=all` (the default). Includes templates from all carriers </li>
     * <li>`include=user`. Includes templates only from carriers which the user has added (whether or not they're currently enabled) </li>
     * <li>`include=enabled`. includes templates only for carriers which the user has added and enabled </li>
     * <li>`carrier=*token*`. filter by specific carrier, e.g. fedex, usps </li>
     * </ul>
     *
     * @param  ?Operations\IncludeT  $include
     * @param  ?string  $carrier
     * @param  ?string  $shippoApiVersion
     * @return Operations\ListCarrierParcelTemplatesResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function list(?Operations\IncludeT $include = null, ?string $carrier = null, ?string $shippoApiVersion = null): Operations\ListCarrierParcelTemplatesResponse
    {
        $request = new Operations\ListCarrierParcelTemplatesRequest(
            include: $include,
            carrier: $carrier,
            shippoApiVersion: $shippoApiVersion,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/parcel-templates');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\ListCarrierParcelTemplatesRequest::class, $request, $this->sdkConfiguration->globals));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Shippo\API\Models\Components\CarrierParcelTemplateList', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\ListCarrierParcelTemplatesResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    carrierParcelTemplateList: $obj);

                return $response;
            } else {
                throw new \Shippo\API\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Retrieve a carrier parcel templates
     *
     * Fetches the parcel template information for a specific carrier parcel template, identified by the token.
     *
     * @param  string  $carrierParcelTemplateToken
     * @param  ?string  $shippoApiVersion
     * @return Operations\GetCarrierParcelTemplateResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function get(string $carrierParcelTemplateToken, ?string $shippoApiVersion = null): Operations\GetCarrierParcelTemplateResponse
    {
        $request = new Operations\GetCarrierParcelTemplateRequest(
            carrierParcelTemplateToken: $carrierParcelTemplateToken,
            shippoApiVersion: $shippoApiVersion,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/parcel-templates/{CarrierParcelTemplateToken}', Operations\GetCarrierParcelTemplateRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Shippo\API\Models\Components\CarrierParcelTemplate', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\GetCarrierParcelTemplateResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    carrierParcelTemplate: $obj);

                return $response;
            } else {
                throw new \Shippo\API\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

}