<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Shippo\API;

use Shippo\API\Models\Components;
use Shippo\API\Models\Operations;
use Speakeasy\Serializer\DeserializationContext;

class UserParcelTemplates
{
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(public SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * List all user parcel templates
     *
     * Returns a list all of all user parcel template objects.
     *
     * @param  ?string  $shippoApiVersion
     * @return Operations\ListUserParcelTemplatesResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function list(?string $shippoApiVersion = null): Operations\ListUserParcelTemplatesResponse
    {
        $request = new Operations\ListUserParcelTemplatesRequest(
            shippoApiVersion: $shippoApiVersion,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/user-parcel-templates');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Shippo\API\Models\Components\UserParcelTemplateList', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\ListUserParcelTemplatesResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    userParcelTemplateList: $obj);

                return $response;
            } else {
                throw new \Shippo\API\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Create a new user parcel template
     *
     * Creates a new user parcel template. <br>You can choose to create a
     * parcel template using a preset carrier template as a starting point, or
     * you can create an entirely custom one. To use a preset carrier template,
     * pass in a unique template token from <a href="#tag/Parcel-Templates">this list</a>
     * plus the weight fields (**weight** and **weight_unit**). Otherwise, omit
     * the template field and pass the other fields, for the weight, length, height,
     * and depth, as well as their units."
     *
     * @param  Components\UserParcelTemplateWithCarrierTemplateCreateRequest|Components\UserParcelTemplateWithoutCarrierTemplateCreateRequest  $userParcelTemplateCreateRequest
     * @param  ?string  $shippoApiVersion
     * @return Operations\CreateUserParcelTemplateResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function create(Components\UserParcelTemplateWithCarrierTemplateCreateRequest|Components\UserParcelTemplateWithoutCarrierTemplateCreateRequest $userParcelTemplateCreateRequest, ?string $shippoApiVersion = null): Operations\CreateUserParcelTemplateResponse
    {
        $request = new Operations\CreateUserParcelTemplateRequest(
            userParcelTemplateCreateRequest: $userParcelTemplateCreateRequest,
            shippoApiVersion: $shippoApiVersion,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/user-parcel-templates');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'userParcelTemplateCreateRequest', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Shippo\API\Models\Components\UserParcelTemplate', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\CreateUserParcelTemplateResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    userParcelTemplate: $obj);

                return $response;
            } else {
                throw new \Shippo\API\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Delete a user parcel template
     *
     * Deletes a user parcel template using an object ID.
     *
     * @param  string  $userParcelTemplateObjectId
     * @param  ?string  $shippoApiVersion
     * @return Operations\DeleteUserParcelTemplateResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function delete(string $userParcelTemplateObjectId, ?string $shippoApiVersion = null): Operations\DeleteUserParcelTemplateResponse
    {
        $request = new Operations\DeleteUserParcelTemplateRequest(
            userParcelTemplateObjectId: $userParcelTemplateObjectId,
            shippoApiVersion: $shippoApiVersion,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/user-parcel-templates/{UserParcelTemplateObjectId}', Operations\DeleteUserParcelTemplateRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('DELETE', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 204) {
            return new Operations\DeleteUserParcelTemplateResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Retrieves a user parcel template
     *
     * Returns the parcel template information for a specific user parcel
     * template, identified by the object ID.
     *
     * @param  string  $userParcelTemplateObjectId
     * @param  ?string  $shippoApiVersion
     * @return Operations\GetUserParcelTemplateResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function get(string $userParcelTemplateObjectId, ?string $shippoApiVersion = null): Operations\GetUserParcelTemplateResponse
    {
        $request = new Operations\GetUserParcelTemplateRequest(
            userParcelTemplateObjectId: $userParcelTemplateObjectId,
            shippoApiVersion: $shippoApiVersion,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/user-parcel-templates/{UserParcelTemplateObjectId}', Operations\GetUserParcelTemplateRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Shippo\API\Models\Components\UserParcelTemplate', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\GetUserParcelTemplateResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    userParcelTemplate: $obj);

                return $response;
            } else {
                throw new \Shippo\API\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Update an existing user parcel template
     *
     * Updates an existing user parcel template.
     *
     * @param  string  $userParcelTemplateObjectId
     * @param  ?Components\UserParcelTemplateUpdateRequest  $userParcelTemplateUpdateRequest
     * @param  ?string  $shippoApiVersion
     * @return Operations\UpdateUserParcelTemplateResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function update(string $userParcelTemplateObjectId, ?Components\UserParcelTemplateUpdateRequest $userParcelTemplateUpdateRequest = null, ?string $shippoApiVersion = null): Operations\UpdateUserParcelTemplateResponse
    {
        $request = new Operations\UpdateUserParcelTemplateRequest(
            userParcelTemplateObjectId: $userParcelTemplateObjectId,
            shippoApiVersion: $shippoApiVersion,
            userParcelTemplateUpdateRequest: $userParcelTemplateUpdateRequest,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/user-parcel-templates/{UserParcelTemplateObjectId}', Operations\UpdateUserParcelTemplateRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'userParcelTemplateUpdateRequest', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Shippo\API\Models\Components\UserParcelTemplate', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\UpdateUserParcelTemplateResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    userParcelTemplate: $obj);

                return $response;
            } else {
                throw new \Shippo\API\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

}