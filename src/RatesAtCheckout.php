<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Shippo\API;

use Shippo\API\Models\Components;
use Shippo\API\Models\Operations;
use Speakeasy\Serializer\DeserializationContext;

class RatesAtCheckout
{
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(public SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Generate a live rates request
     *
     * Initiates a live rates request. Include either the object ID for
     * an existing address record or a fully formed address object when entering
     * an address value. You can also enter the object ID of an existing user parcel
     * template or a fully formed user parcel template object as the parcel value.
     *
     * @param  Components\LiveRateCreateRequest  $liveRateCreateRequest
     * @param  ?string  $shippoApiVersion
     * @return Operations\CreateLiveRateResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function create(Components\LiveRateCreateRequest $liveRateCreateRequest, ?string $shippoApiVersion = null): Operations\CreateLiveRateResponse
    {
        $request = new Operations\CreateLiveRateRequest(
            liveRateCreateRequest: $liveRateCreateRequest,
            shippoApiVersion: $shippoApiVersion,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/live-rates');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'liveRateCreateRequest', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Shippo\API\Models\Components\LiveRatePaginatedList', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\CreateLiveRateResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    liveRatePaginatedList: $obj);

                return $response;
            } else {
                throw new \Shippo\API\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Show current default parcel template
     *
     * Retrieve and display the currently configured default parcel template for live rates.
     *
     * @param  ?string  $shippoApiVersion
     * @return Operations\GetDefaultParcelTemplateResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function getDefaultParcelTemplate(?string $shippoApiVersion = null): Operations\GetDefaultParcelTemplateResponse
    {
        $request = new Operations\GetDefaultParcelTemplateRequest(
            shippoApiVersion: $shippoApiVersion,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/live-rates/settings/parcel-template');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Shippo\API\Models\Components\DefaultParcelTemplate', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\GetDefaultParcelTemplateResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    defaultParcelTemplate: $obj);

                return $response;
            } else {
                throw new \Shippo\API\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Update default parcel template
     *
     * Update the currently configured default parcel template for live rates. The object_id in the request payload should identify the user parcel template to be the new default.
     *
     * @param  ?Components\DefaultParcelTemplateUpdateRequest  $defaultParcelTemplateUpdateRequest
     * @param  ?string  $shippoApiVersion
     * @return Operations\UpdateDefaultParcelTemplateResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function updateDefaultParcelTemplate(?Components\DefaultParcelTemplateUpdateRequest $defaultParcelTemplateUpdateRequest = null, ?string $shippoApiVersion = null): Operations\UpdateDefaultParcelTemplateResponse
    {
        $request = new Operations\UpdateDefaultParcelTemplateRequest(
            shippoApiVersion: $shippoApiVersion,
            defaultParcelTemplateUpdateRequest: $defaultParcelTemplateUpdateRequest,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/live-rates/settings/parcel-template');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'defaultParcelTemplateUpdateRequest', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Shippo\API\Models\Components\DefaultParcelTemplate', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\UpdateDefaultParcelTemplateResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    defaultParcelTemplate: $obj);

                return $response;
            } else {
                throw new \Shippo\API\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Clear current default parcel template
     *
     * Clears the currently configured default parcel template for live rates.
     *
     * @param  ?string  $shippoApiVersion
     * @return Operations\DeleteDefaultParcelTemplateResponse
     * @throws \Shippo\API\Models\Errors\SDKException
     */
    public function deleteDefaultParcelTemplate(?string $shippoApiVersion = null): Operations\DeleteDefaultParcelTemplateResponse
    {
        $request = new Operations\DeleteDefaultParcelTemplateRequest(
            shippoApiVersion: $shippoApiVersion,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/live-rates/settings/parcel-template');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('DELETE', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 204) {
            return new Operations\DeleteDefaultParcelTemplateResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Shippo\API\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Shippo\API\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

}